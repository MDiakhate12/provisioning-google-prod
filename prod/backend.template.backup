provider "google" {
  project = var.project_id
  version = "~> 3.59"
}

// INTANCE TEMPLATE
resource "google_compute_instance_template" "RESOURCE_NAME_instance_template" {
  name_prefix  = "${var.vm_group_name}-backend-"
  machine_type = "custom-${var.cpu}-${var.memory}"
  region       = var.region

  metadata_startup_script = templatefile(var.backend.path,
      {
        PROJECT_NAME       = var.backend.project_name
        PROJECT_REPOSITORY = var.backend.project_repository
        PORT               = var.backend.port
        DB_URI             = var.backend.db_uri
        MAIN_FILE          = var.backend.main_file
      } 
  )


  // boot disk
  disk {
    source_image = "${var.image_project}/${var.image_family}"
    disk_size_gb = var.disk_size_gb
    auto_delete  = true
    boot         = true
  }

  // networking
  network_interface {
    network = "default"
    access_config {}
  }

  tags = ["http-server", "https-server", "web", "backend", "nodejs", "prod"]

  lifecycle {
    create_before_destroy = true
  }
}

// MANAGED INSTANCE GROUP
resource "google_compute_instance_group_manager" "RESOURCE_NAME_instance_group" {
  name               = "${var.vm_group_name}-backend"
  base_instance_name = "${var.vm_group_name}-backend"
  zone               = var.zone

  // target_size        = 1
  // wait_for_instances = true

  version {
    instance_template = google_compute_instance_template.RESOURCE_NAME_instance_template.id
  }

  named_port {
    name = "http"
    port = 80
  }
}

// AUTOSCALER
resource "google_compute_autoscaler" "RESOURCE_NAME_autoscaler" {
  name   = "${var.vm_group_name}-backend"
  zone   = var.zone
  target = google_compute_instance_group_manager.RESOURCE_NAME_instance_group.id

  autoscaling_policy {
    max_replicas    = 2
    min_replicas    = 1
    cooldown_period = 60

    cpu_utilization {
      target = 0.8
    }
  }
}

// LOAD BALANCER
module "gce-ilb" {
  source  = "GoogleCloudPlatform/lb-internal/google"
  version = "~> 2.0"
  region  = var.region
  name    = "${var.vm_group_name}-backend"
  ports   = ["80"]
  project = var.project_id
  health_check = {
    type                = "tcp"
    check_interval_sec  = null
    healthy_threshold   = null
    timeout_sec         = null
    unhealthy_threshold = null
    response            = ""
    proxy_header        = "NONE"
    port                = 80
    port_name           = "health-check-port"
    request             = ""
    response            = ""
    request_path        = "/"
    host                = null
  }
  source_tags = ["frontend", "react", "prod", "http-server", "https-server", "web"]
  target_tags = ["backend", "nodejs", "prod", "http-server", "https-server", "web"]
  backends = [
    { group = google_compute_instance_group_manager.RESOURCE_NAME_instance_group.instance_group, description = "" }
  ]
}

resource "null_resource" "ip" {
  provisioner "local-exec" {
    command = "echo ${module.gce-ilb.ip_address} > ip"
  }
}

output "RESOURCE_NAME-load-balancer-ip" {
  value = module.gce-ilb.ip_address
}
